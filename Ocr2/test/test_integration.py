import os
import shutil
import requests


BASE_URL = "http://127.0.0.1:5000"
UPLOAD_FOLDER = "test_data/uploads"
OUTPUT_FOLDER = "test_data/output"

def setup_test_environment():
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É: —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã.
    """
    if os.path.exists("test_data"):
        shutil.rmtree("test_data")

    os.makedirs(UPLOAD_FOLDER, exist_ok=True)
    os.makedirs(OUTPUT_FOLDER, exist_ok=True)


    sample_image_path = os.path.join(UPLOAD_FOLDER, "sample_image.jpg")
    with open(sample_image_path, "wb") as f:
        f.write(requests.get("https://via.placeholder.com/300").content)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞.")
    return sample_image_path

def test_classify(sample_image_path):

    url = f"{BASE_URL}/classify"
    payload = {"file_path": sample_image_path}

    response = requests.post(url, json=payload)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.json()}"
    print(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {response.json()}")

def test_ocr(sample_image_path):

    url = f"{BASE_URL}/ocr"
    payload = {"file_path": sample_image_path}

    response = requests.post(url, json=payload)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ OCR: {response.json()}"
    print(f"‚úÖ OCR —É—Å–ø–µ—à–µ–Ω: {response.json()}")
    return response.json()["output_path"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º

def test_spellcheck(results_dir):

    url = f"{BASE_URL}/spellcheck"
    payload = {"ocr_results_dir": results_dir}

    response = requests.post(url, json=payload)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏: {response.json()}"
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–∞: {response.json()}")

def test_extract(results_dir):

    url = f"{BASE_URL}/extract"
    payload = {"ocr_results_dir": results_dir}

    response = requests.post(url, json=payload)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.json()}"
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ: {response.json()}")

def cleanup_test_environment():

    if os.path.exists("test_data"):
        shutil.rmtree("test_data")
    print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞.")

if __name__ == "__main__":
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        sample_image = setup_test_environment()


        test_classify(sample_image)


        ocr_results_dir = test_ocr(sample_image)


        test_spellcheck(ocr_results_dir)


        test_extract(ocr_results_dir)

        print("üéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
    finally:
        cleanup_test_environment()
